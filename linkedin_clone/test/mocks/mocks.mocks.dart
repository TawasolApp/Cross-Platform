// Mocks generated by Mockito 5.4.5 from annotations
// in linkedin_clone/test/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:image_picker/image_picker.dart' as _i11;
import 'package:linkedin_clone/features/company/data/datasources/company_remote_data_source.dart'
    as _i2;
import 'package:linkedin_clone/features/company/data/repositories/company_repository_impl.dart'
    as _i5;
import 'package:linkedin_clone/features/company/domain/entities/company.dart'
    as _i3;
import 'package:linkedin_clone/features/company/domain/entities/company_create_entity.dart'
    as _i7;
import 'package:linkedin_clone/features/company/domain/entities/company_update_entity.dart'
    as _i8;
import 'package:linkedin_clone/features/company/domain/entities/user.dart'
    as _i9;
import 'package:linkedin_clone/features/company/domain/repositories/media_repository.dart'
    as _i4;
import 'package:linkedin_clone/features/company/domain/usecases/upload_image_use_case.dart'
    as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCompanyRemoteDataSource_0 extends _i1.SmartFake
    implements _i2.CompanyRemoteDataSource {
  _FakeCompanyRemoteDataSource_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCompany_1 extends _i1.SmartFake implements _i3.Company {
  _FakeCompany_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMediaRepository_2 extends _i1.SmartFake
    implements _i4.MediaRepository {
  _FakeMediaRepository_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [CompanyRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockCompanyRepositoryImpl extends _i1.Mock
    implements _i5.CompanyRepositoryImpl {
  MockCompanyRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CompanyRemoteDataSource get remoteDataSource =>
      (super.noSuchMethod(
            Invocation.getter(#remoteDataSource),
            returnValue: _FakeCompanyRemoteDataSource_0(
              this,
              Invocation.getter(#remoteDataSource),
            ),
          )
          as _i2.CompanyRemoteDataSource);

  @override
  _i6.Future<_i3.Company> getCompanyDetails(String? companyId) =>
      (super.noSuchMethod(
            Invocation.method(#getCompanyDetails, [companyId]),
            returnValue: _i6.Future<_i3.Company>.value(
              _FakeCompany_1(
                this,
                Invocation.method(#getCompanyDetails, [companyId]),
              ),
            ),
          )
          as _i6.Future<_i3.Company>);

  @override
  _i6.Future<List<_i3.Company>> getRelatedCompanies(
    String? companyId, {
    int? page = 1,
    int? limit = 4,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getRelatedCompanies,
              [companyId],
              {#page: page, #limit: limit},
            ),
            returnValue: _i6.Future<List<_i3.Company>>.value(<_i3.Company>[]),
          )
          as _i6.Future<List<_i3.Company>>);

  @override
  _i6.Future<void> createCompany(_i7.CompanyCreateEntity? company) =>
      (super.noSuchMethod(
            Invocation.method(#createCompany, [company]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> updateCompanyDetails(
    _i8.UpdateCompanyEntity? updatedCompany,
    String? companyId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateCompanyDetails, [
              updatedCompany,
              companyId,
            ]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<List<_i3.Company>> getAllCompanies(
    String? query, {
    int? page = 1,
    int? limit = 10,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getAllCompanies,
              [query],
              {#page: page, #limit: limit},
            ),
            returnValue: _i6.Future<List<_i3.Company>>.value(<_i3.Company>[]),
          )
          as _i6.Future<List<_i3.Company>>);

  @override
  _i6.Future<List<_i9.User>> getCompanyAdmins(
    String? companyId, {
    int? page = 1,
    int? limit = 3,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getCompanyAdmins,
              [companyId],
              {#page: page, #limit: limit},
            ),
            returnValue: _i6.Future<List<_i9.User>>.value(<_i9.User>[]),
          )
          as _i6.Future<List<_i9.User>>);

  @override
  _i6.Future<List<_i9.User>> getFollowers(
    String? companyId, {
    int? page = 1,
    int? limit = 4,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getFollowers,
              [companyId],
              {#page: page, #limit: limit},
            ),
            returnValue: _i6.Future<List<_i9.User>>.value(<_i9.User>[]),
          )
          as _i6.Future<List<_i9.User>>);
}

/// A class which mocks [UploadImageUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUploadImageUseCase extends _i1.Mock
    implements _i10.UploadImageUseCase {
  MockUploadImageUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.MediaRepository get mediaRepository =>
      (super.noSuchMethod(
            Invocation.getter(#mediaRepository),
            returnValue: _FakeMediaRepository_2(
              this,
              Invocation.getter(#mediaRepository),
            ),
          )
          as _i4.MediaRepository);

  @override
  _i6.Future<String> execute(_i11.XFile? imageFile) =>
      (super.noSuchMethod(
            Invocation.method(#execute, [imageFile]),
            returnValue: _i6.Future<String>.value(
              _i12.dummyValue<String>(
                this,
                Invocation.method(#execute, [imageFile]),
              ),
            ),
          )
          as _i6.Future<String>);
}
