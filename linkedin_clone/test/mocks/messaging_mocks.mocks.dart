// Mocks generated by Mockito 5.4.5 from annotations
// in linkedin_clone/test/mocks/messaging_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:linkedin_clone/core/services/messaging_socket_service.dart'
    as _i7;
import 'package:linkedin_clone/features/messaging/data/repository/conversation_repository.dart'
    as _i2;
import 'package:linkedin_clone/features/messaging/domain/entities/conversation_entity.dart'
    as _i9;
import 'package:linkedin_clone/features/messaging/domain/entities/message_entity.dart'
    as _i6;
import 'package:linkedin_clone/features/messaging/domain/usecases/get_chat_use_case.dart'
    as _i4;
import 'package:linkedin_clone/features/messaging/domain/usecases/get_conversations_usecase.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:socket_io_client/socket_io_client.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeConversationRepository_0 extends _i1.SmartFake
    implements _i2.ConversationRepository {
  _FakeConversationRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSocket_1 extends _i1.SmartFake implements _i3.Socket {
  _FakeSocket_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetChatUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetChatUseCase extends _i1.Mock implements _i4.GetChatUseCase {
  MockGetChatUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ConversationRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeConversationRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ConversationRepository);

  @override
  _i5.Future<List<_i6.MessageEntity>> call(String? conversationId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [conversationId]),
            returnValue: _i5.Future<List<_i6.MessageEntity>>.value(
              <_i6.MessageEntity>[],
            ),
          )
          as _i5.Future<List<_i6.MessageEntity>>);
}

/// A class which mocks [MessagingSocketService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMessagingSocketService extends _i1.Mock
    implements _i7.MessagingSocketService {
  MockMessagingSocketService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Socket get socket =>
      (super.noSuchMethod(
            Invocation.getter(#socket),
            returnValue: _FakeSocket_1(this, Invocation.getter(#socket)),
          )
          as _i3.Socket);

  @override
  set socket(_i3.Socket? _socket) => super.noSuchMethod(
    Invocation.setter(#socket, _socket),
    returnValueForMissingStub: null,
  );

  @override
  void connect(String? userId) => super.noSuchMethod(
    Invocation.method(#connect, [userId]),
    returnValueForMissingStub: null,
  );

  @override
  void listenToMessages(dynamic Function(dynamic)? onMessage) =>
      super.noSuchMethod(
        Invocation.method(#listenToMessages, [onMessage]),
        returnValueForMissingStub: null,
      );

  @override
  void listenToTyping(dynamic Function(dynamic)? onTyping) =>
      super.noSuchMethod(
        Invocation.method(#listenToTyping, [onTyping]),
        returnValueForMissingStub: null,
      );

  @override
  void sendMessage(Map<String, dynamic>? message) => super.noSuchMethod(
    Invocation.method(#sendMessage, [message]),
    returnValueForMissingStub: null,
  );

  @override
  void sendTyping(dynamic payload) => super.noSuchMethod(
    Invocation.method(#sendTyping, [payload]),
    returnValueForMissingStub: null,
  );

  @override
  void markMessagesRead(String? conversationId) => super.noSuchMethod(
    Invocation.method(#markMessagesRead, [conversationId]),
    returnValueForMissingStub: null,
  );

  @override
  void markAllDelivered() => super.noSuchMethod(
    Invocation.method(#markAllDelivered, []),
    returnValueForMissingStub: null,
  );

  @override
  void disconnect() => super.noSuchMethod(
    Invocation.method(#disconnect, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [GetConversationsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetConversationsUseCase extends _i1.Mock
    implements _i8.GetConversationsUseCase {
  MockGetConversationsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ConversationRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeConversationRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ConversationRepository);

  @override
  _i5.Future<List<_i9.ConversationEntity>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i5.Future<List<_i9.ConversationEntity>>.value(
              <_i9.ConversationEntity>[],
            ),
          )
          as _i5.Future<List<_i9.ConversationEntity>>);
}
