// Mocks generated by Mockito 5.4.5 from annotations
// in linkedin_clone/test/mocks/mock_repository.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:fpdart/fpdart.dart' as _i4;
import 'package:linkedin_clone/core/errors/failures.dart' as _i5;
import 'package:linkedin_clone/features/feed/domain/entities/post_entity.dart'
    as _i6;
import 'package:linkedin_clone/features/feed/domain/repositories/feed_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [FeedRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFeedRepository extends _i1.Mock implements _i2.FeedRepository {
  MockFeedRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Either<_i5.Failure, List<_i6.PostEntity>>> getPosts({
    int? page,
    int? limit = 10,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getPosts, [], {#page: page, #limit: limit}),
            returnValue:
                _i3.Future<_i4.Either<_i5.Failure, List<_i6.PostEntity>>>.value(
                  _i7.dummyValue<_i4.Either<_i5.Failure, List<_i6.PostEntity>>>(
                    this,
                    Invocation.method(#getPosts, [], {
                      #page: page,
                      #limit: limit,
                    }),
                  ),
                ),
          )
          as _i3.Future<_i4.Either<_i5.Failure, List<_i6.PostEntity>>>);

  @override
  _i3.Future<_i4.Either<_i5.Failure, _i6.PostEntity>> createPost({
    required String? content,
    List<String>? media,
    List<String>? taggedUsers,
    required String? visibility,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createPost, [], {
              #content: content,
              #media: media,
              #taggedUsers: taggedUsers,
              #visibility: visibility,
            }),
            returnValue:
                _i3.Future<_i4.Either<_i5.Failure, _i6.PostEntity>>.value(
                  _i7.dummyValue<_i4.Either<_i5.Failure, _i6.PostEntity>>(
                    this,
                    Invocation.method(#createPost, [], {
                      #content: content,
                      #media: media,
                      #taggedUsers: taggedUsers,
                      #visibility: visibility,
                    }),
                  ),
                ),
          )
          as _i3.Future<_i4.Either<_i5.Failure, _i6.PostEntity>>);

  @override
  _i3.Future<_i4.Either<_i5.Failure, void>> deletePost(String? postId) =>
      (super.noSuchMethod(
            Invocation.method(#deletePost, [postId]),
            returnValue: _i3.Future<_i4.Either<_i5.Failure, void>>.value(
              _i7.dummyValue<_i4.Either<_i5.Failure, void>>(
                this,
                Invocation.method(#deletePost, [postId]),
              ),
            ),
          )
          as _i3.Future<_i4.Either<_i5.Failure, void>>);

  @override
  _i3.Future<_i4.Either<_i5.Failure, _i4.Unit>> savePost(String? postId) =>
      (super.noSuchMethod(
            Invocation.method(#savePost, [postId]),
            returnValue: _i3.Future<_i4.Either<_i5.Failure, _i4.Unit>>.value(
              _i7.dummyValue<_i4.Either<_i5.Failure, _i4.Unit>>(
                this,
                Invocation.method(#savePost, [postId]),
              ),
            ),
          )
          as _i3.Future<_i4.Either<_i5.Failure, _i4.Unit>>);

  @override
  _i3.Future<_i4.Either<_i5.Failure, _i4.Unit>> reactToPost({
    required String? postId,
    required Map<String, bool>? reactions,
    required String? postType,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#reactToPost, [], {
              #postId: postId,
              #reactions: reactions,
              #postType: postType,
            }),
            returnValue: _i3.Future<_i4.Either<_i5.Failure, _i4.Unit>>.value(
              _i7.dummyValue<_i4.Either<_i5.Failure, _i4.Unit>>(
                this,
                Invocation.method(#reactToPost, [], {
                  #postId: postId,
                  #reactions: reactions,
                  #postType: postType,
                }),
              ),
            ),
          )
          as _i3.Future<_i4.Either<_i5.Failure, _i4.Unit>>);

  @override
  _i3.Future<_i4.Either<_i5.Failure, _i4.Unit>> editPost({
    required String? postId,
    required String? content,
    required List<String>? media,
    required List<String>? taggedUsers,
    required String? visibility,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#editPost, [], {
              #postId: postId,
              #content: content,
              #media: media,
              #taggedUsers: taggedUsers,
              #visibility: visibility,
            }),
            returnValue: _i3.Future<_i4.Either<_i5.Failure, _i4.Unit>>.value(
              _i7.dummyValue<_i4.Either<_i5.Failure, _i4.Unit>>(
                this,
                Invocation.method(#editPost, [], {
                  #postId: postId,
                  #content: content,
                  #media: media,
                  #taggedUsers: taggedUsers,
                  #visibility: visibility,
                }),
              ),
            ),
          )
          as _i3.Future<_i4.Either<_i5.Failure, _i4.Unit>>);

  @override
  _i3.Future<_i4.Either<_i5.Failure, _i4.Unit>> addComment(
    String? postId,
    String? content,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#addComment, [postId, content]),
            returnValue: _i3.Future<_i4.Either<_i5.Failure, _i4.Unit>>.value(
              _i7.dummyValue<_i4.Either<_i5.Failure, _i4.Unit>>(
                this,
                Invocation.method(#addComment, [postId, content]),
              ),
            ),
          )
          as _i3.Future<_i4.Either<_i5.Failure, _i4.Unit>>);

  @override
  _i3.Future<_i4.Either<_i5.Failure, List<dynamic>>> fetchComments(
    String? postId, {
    int? page = 1,
    int? limit = 10,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #fetchComments,
              [postId],
              {#page: page, #limit: limit},
            ),
            returnValue:
                _i3.Future<_i4.Either<_i5.Failure, List<dynamic>>>.value(
                  _i7.dummyValue<_i4.Either<_i5.Failure, List<dynamic>>>(
                    this,
                    Invocation.method(
                      #fetchComments,
                      [postId],
                      {#page: page, #limit: limit},
                    ),
                  ),
                ),
          )
          as _i3.Future<_i4.Either<_i5.Failure, List<dynamic>>>);

  @override
  _i3.Future<_i4.Either<_i5.Failure, void>> editComment({
    required String? commentId,
    required String? content,
    List<String>? taggedUsers,
    bool? isReply,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#editComment, [], {
              #commentId: commentId,
              #content: content,
              #taggedUsers: taggedUsers,
              #isReply: isReply,
            }),
            returnValue: _i3.Future<_i4.Either<_i5.Failure, void>>.value(
              _i7.dummyValue<_i4.Either<_i5.Failure, void>>(
                this,
                Invocation.method(#editComment, [], {
                  #commentId: commentId,
                  #content: content,
                  #taggedUsers: taggedUsers,
                  #isReply: isReply,
                }),
              ),
            ),
          )
          as _i3.Future<_i4.Either<_i5.Failure, void>>);
}
