// Mocks generated by Mockito 5.4.5 from annotations
// in linkedin_clone/test/mocks/feed_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:fpdart/fpdart.dart' as _i5;
import 'package:linkedin_clone/core/errors/failures.dart' as _i6;
import 'package:linkedin_clone/features/feed/data/models/comment_model.dart'
    as _i18;
import 'package:linkedin_clone/features/feed/data/models/reaction_model.dart'
    as _i24;
import 'package:linkedin_clone/features/feed/domain/entities/post_entity.dart'
    as _i7;
import 'package:linkedin_clone/features/feed/domain/repositories/feed_repository.dart'
    as _i2;
import 'package:linkedin_clone/features/feed/domain/usecases/comment_post_usecase.dart'
    as _i17;
import 'package:linkedin_clone/features/feed/domain/usecases/create_post_usecase.dart'
    as _i12;
import 'package:linkedin_clone/features/feed/domain/usecases/delete_comment_usecase.dart'
    as _i19;
import 'package:linkedin_clone/features/feed/domain/usecases/delete_post_usecase.dart'
    as _i13;
import 'package:linkedin_clone/features/feed/domain/usecases/edit_comment_usecase.dart'
    as _i21;
import 'package:linkedin_clone/features/feed/domain/usecases/edit_post_usecase.dart'
    as _i16;
import 'package:linkedin_clone/features/feed/domain/usecases/fetch_comments_usecase.dart'
    as _i20;
import 'package:linkedin_clone/features/feed/domain/usecases/get_news_feed_usecase.dart'
    as _i10;
import 'package:linkedin_clone/features/feed/domain/usecases/get_post_by_id_usecase.dart'
    as _i3;
import 'package:linkedin_clone/features/feed/domain/usecases/get_post_reactions_usecase.dart'
    as _i23;
import 'package:linkedin_clone/features/feed/domain/usecases/get_reposts_usecase.dart'
    as _i26;
import 'package:linkedin_clone/features/feed/domain/usecases/get_saved_posts_usecase.dart'
    as _i25;
import 'package:linkedin_clone/features/feed/domain/usecases/get_user_posts_usecase.dart'
    as _i11;
import 'package:linkedin_clone/features/feed/domain/usecases/react_to_post_usecase.dart'
    as _i22;
import 'package:linkedin_clone/features/feed/domain/usecases/save_post_usecase.dart'
    as _i14;
import 'package:linkedin_clone/features/feed/domain/usecases/search_posts_usecase.dart'
    as _i9;
import 'package:linkedin_clone/features/feed/domain/usecases/unsave_post_usecase.dart'
    as _i15;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFeedRepository_0 extends _i1.SmartFake
    implements _i2.FeedRepository {
  _FakeFeedRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [FetchPostByIdUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchPostByIdUseCase extends _i1.Mock
    implements _i3.FetchPostByIdUseCase {
  MockFetchPostByIdUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FeedRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeFeedRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.FeedRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, _i7.PostEntity>> call({
    required String? userId,
    required String? postId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {#userId: userId, #postId: postId}),
            returnValue:
                _i4.Future<_i5.Either<_i6.Failure, _i7.PostEntity>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, _i7.PostEntity>>(
                    this,
                    Invocation.method(#call, [], {
                      #userId: userId,
                      #postId: postId,
                    }),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, _i7.PostEntity>>);
}

/// A class which mocks [SearchPostsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchPostsUseCase extends _i1.Mock
    implements _i9.SearchPostsUseCase {
  MockSearchPostsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FeedRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeFeedRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.FeedRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, List<_i7.PostEntity>>> call({
    required String? companyId,
    required String? query,
    bool? network,
    String? timeframe = 'all',
    int? page = 1,
    int? limit = 10,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {
              #companyId: companyId,
              #query: query,
              #network: network,
              #timeframe: timeframe,
              #page: page,
              #limit: limit,
            }),
            returnValue:
                _i4.Future<_i5.Either<_i6.Failure, List<_i7.PostEntity>>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, List<_i7.PostEntity>>>(
                    this,
                    Invocation.method(#call, [], {
                      #companyId: companyId,
                      #query: query,
                      #network: network,
                      #timeframe: timeframe,
                      #page: page,
                      #limit: limit,
                    }),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, List<_i7.PostEntity>>>);
}

/// A class which mocks [GetNewsFeedUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetNewsFeedUseCase extends _i1.Mock
    implements _i10.GetNewsFeedUseCase {
  MockGetNewsFeedUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FeedRepository get feedRepository =>
      (super.noSuchMethod(
            Invocation.getter(#feedRepository),
            returnValue: _FakeFeedRepository_0(
              this,
              Invocation.getter(#feedRepository),
            ),
          )
          as _i2.FeedRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, List<_i7.PostEntity>>> execute(
    String? userId, {
    required int? page,
    required int? limit,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#execute, [userId], {#page: page, #limit: limit}),
            returnValue:
                _i4.Future<_i5.Either<_i6.Failure, List<_i7.PostEntity>>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, List<_i7.PostEntity>>>(
                    this,
                    Invocation.method(
                      #execute,
                      [userId],
                      {#page: page, #limit: limit},
                    ),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, List<_i7.PostEntity>>>);
}

/// A class which mocks [GetUserPostsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUserPostsUseCase extends _i1.Mock
    implements _i11.GetUserPostsUseCase {
  MockGetUserPostsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FeedRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeFeedRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.FeedRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, List<_i7.PostEntity>>> call(
    String? companyId,
    String? userId, {
    int? page = 1,
    int? limit = 10,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #call,
              [companyId, userId],
              {#page: page, #limit: limit},
            ),
            returnValue:
                _i4.Future<_i5.Either<_i6.Failure, List<_i7.PostEntity>>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, List<_i7.PostEntity>>>(
                    this,
                    Invocation.method(
                      #call,
                      [companyId, userId],
                      {#page: page, #limit: limit},
                    ),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, List<_i7.PostEntity>>>);
}

/// A class which mocks [CreatePostUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreatePostUseCase extends _i1.Mock implements _i12.CreatePostUseCase {
  MockCreatePostUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FeedRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeFeedRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.FeedRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, _i7.PostEntity>> call(
    String? userId, {
    required String? content,
    List<String>? media,
    List<String>? taggedUsers,
    required String? visibility,
    String? parentPostId,
    bool? isSilentRepost = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #call,
              [userId],
              {
                #content: content,
                #media: media,
                #taggedUsers: taggedUsers,
                #visibility: visibility,
                #parentPostId: parentPostId,
                #isSilentRepost: isSilentRepost,
              },
            ),
            returnValue:
                _i4.Future<_i5.Either<_i6.Failure, _i7.PostEntity>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, _i7.PostEntity>>(
                    this,
                    Invocation.method(
                      #call,
                      [userId],
                      {
                        #content: content,
                        #media: media,
                        #taggedUsers: taggedUsers,
                        #visibility: visibility,
                        #parentPostId: parentPostId,
                        #isSilentRepost: isSilentRepost,
                      },
                    ),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, _i7.PostEntity>>);
}

/// A class which mocks [DeletePostUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeletePostUseCase extends _i1.Mock implements _i13.DeletePostUseCase {
  MockDeletePostUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FeedRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeFeedRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.FeedRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, void>> call(
    String? userId,
    String? postId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [userId, postId]),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, void>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                this,
                Invocation.method(#call, [userId, postId]),
              ),
            ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, void>>);
}

/// A class which mocks [SavePostUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSavePostUseCase extends _i1.Mock implements _i14.SavePostUseCase {
  MockSavePostUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FeedRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeFeedRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.FeedRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, _i5.Unit>> call(
    String? userId,
    String? postId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [userId, postId]),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, _i5.Unit>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, _i5.Unit>>(
                this,
                Invocation.method(#call, [userId, postId]),
              ),
            ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, _i5.Unit>>);
}

/// A class which mocks [UnsavePostUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUnsavePostUseCase extends _i1.Mock implements _i15.UnsavePostUseCase {
  MockUnsavePostUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FeedRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeFeedRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.FeedRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, _i5.Unit>> call(
    String? userId,
    String? postId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [userId, postId]),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, _i5.Unit>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, _i5.Unit>>(
                this,
                Invocation.method(#call, [userId, postId]),
              ),
            ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, _i5.Unit>>);
}

/// A class which mocks [EditPostUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockEditPostUseCase extends _i1.Mock implements _i16.EditPostUseCase {
  MockEditPostUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FeedRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeFeedRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.FeedRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, _i5.Unit>> call(
    String? userId, {
    required String? postId,
    required String? content,
    required List<String>? media,
    required List<String>? taggedUsers,
    required String? visibility,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #call,
              [userId],
              {
                #postId: postId,
                #content: content,
                #media: media,
                #taggedUsers: taggedUsers,
                #visibility: visibility,
              },
            ),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, _i5.Unit>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, _i5.Unit>>(
                this,
                Invocation.method(
                  #call,
                  [userId],
                  {
                    #postId: postId,
                    #content: content,
                    #media: media,
                    #taggedUsers: taggedUsers,
                    #visibility: visibility,
                  },
                ),
              ),
            ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, _i5.Unit>>);
}

/// A class which mocks [CommentPostUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCommentPostUseCase extends _i1.Mock
    implements _i17.CommentPostUseCase {
  MockCommentPostUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FeedRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeFeedRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.FeedRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, _i18.CommentModel>> call(
    String? userId, {
    required String? postId,
    required String? content,
    List<String>? taggedUsers,
    bool? isReply = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #call,
              [userId],
              {
                #postId: postId,
                #content: content,
                #taggedUsers: taggedUsers,
                #isReply: isReply,
              },
            ),
            returnValue:
                _i4.Future<_i5.Either<_i6.Failure, _i18.CommentModel>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, _i18.CommentModel>>(
                    this,
                    Invocation.method(
                      #call,
                      [userId],
                      {
                        #postId: postId,
                        #content: content,
                        #taggedUsers: taggedUsers,
                        #isReply: isReply,
                      },
                    ),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, _i18.CommentModel>>);
}

/// A class which mocks [DeleteCommentUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteCommentUseCase extends _i1.Mock
    implements _i19.DeleteCommentUseCase {
  MockDeleteCommentUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FeedRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeFeedRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.FeedRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, _i5.Unit>> call(
    String? userId,
    String? commentId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [userId, commentId]),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, _i5.Unit>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, _i5.Unit>>(
                this,
                Invocation.method(#call, [userId, commentId]),
              ),
            ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, _i5.Unit>>);
}

/// A class which mocks [FetchCommentsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchCommentsUseCase extends _i1.Mock
    implements _i20.FetchCommentsUseCase {
  MockFetchCommentsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FeedRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeFeedRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.FeedRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, List<_i18.CommentModel>>> call(
    String? userId,
    String? postId, {
    int? page = 1,
    int? limit = 10,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #call,
              [userId, postId],
              {#page: page, #limit: limit},
            ),
            returnValue: _i4.Future<
              _i5.Either<_i6.Failure, List<_i18.CommentModel>>
            >.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, List<_i18.CommentModel>>>(
                this,
                Invocation.method(
                  #call,
                  [userId, postId],
                  {#page: page, #limit: limit},
                ),
              ),
            ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, List<_i18.CommentModel>>>);
}

/// A class which mocks [EditCommentUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockEditCommentUseCase extends _i1.Mock
    implements _i21.EditCommentUseCase {
  MockEditCommentUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FeedRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeFeedRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.FeedRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, void>> call(
    String? userId, {
    required String? commentId,
    required String? content,
    List<String>? tagged,
    bool? isReply = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #call,
              [userId],
              {
                #commentId: commentId,
                #content: content,
                #tagged: tagged,
                #isReply: isReply,
              },
            ),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, void>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                this,
                Invocation.method(
                  #call,
                  [userId],
                  {
                    #commentId: commentId,
                    #content: content,
                    #tagged: tagged,
                    #isReply: isReply,
                  },
                ),
              ),
            ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, void>>);
}

/// A class which mocks [ReactToPostUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockReactToPostUseCase extends _i1.Mock
    implements _i22.ReactToPostUseCase {
  MockReactToPostUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FeedRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeFeedRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.FeedRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, _i5.Unit>> call(
    String? userId, {
    required String? postId,
    required Map<String, bool>? reactions,
    required String? postType,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #call,
              [userId],
              {#postId: postId, #reactions: reactions, #postType: postType},
            ),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, _i5.Unit>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, _i5.Unit>>(
                this,
                Invocation.method(
                  #call,
                  [userId],
                  {#postId: postId, #reactions: reactions, #postType: postType},
                ),
              ),
            ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, _i5.Unit>>);
}

/// A class which mocks [GetPostReactionsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPostReactionsUseCase extends _i1.Mock
    implements _i23.GetPostReactionsUseCase {
  MockGetPostReactionsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FeedRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeFeedRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.FeedRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, List<_i24.ReactionModel>>> call(
    String? userId,
    String? postId, {
    String? type = 'All',
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [userId, postId], {#type: type}),
            returnValue: _i4.Future<
              _i5.Either<_i6.Failure, List<_i24.ReactionModel>>
            >.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, List<_i24.ReactionModel>>>(
                this,
                Invocation.method(#call, [userId, postId], {#type: type}),
              ),
            ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, List<_i24.ReactionModel>>>);
}

/// A class which mocks [GetSavedPostsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetSavedPostsUseCase extends _i1.Mock
    implements _i25.GetSavedPostsUseCase {
  MockGetSavedPostsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FeedRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeFeedRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.FeedRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, List<_i7.PostEntity>>> call(
    String? companyId, {
    int? page = 1,
    int? limit = 10,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [companyId], {#page: page, #limit: limit}),
            returnValue:
                _i4.Future<_i5.Either<_i6.Failure, List<_i7.PostEntity>>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, List<_i7.PostEntity>>>(
                    this,
                    Invocation.method(
                      #call,
                      [companyId],
                      {#page: page, #limit: limit},
                    ),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, List<_i7.PostEntity>>>);
}

/// A class which mocks [GetRepostsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRepostsUseCase extends _i1.Mock implements _i26.GetRepostsUseCase {
  MockGetRepostsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FeedRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeFeedRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.FeedRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, List<_i7.PostEntity>>> call({
    required String? userId,
    required String? postId,
    int? page = 1,
    int? limit = 10,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {
              #userId: userId,
              #postId: postId,
              #page: page,
              #limit: limit,
            }),
            returnValue:
                _i4.Future<_i5.Either<_i6.Failure, List<_i7.PostEntity>>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, List<_i7.PostEntity>>>(
                    this,
                    Invocation.method(#call, [], {
                      #userId: userId,
                      #postId: postId,
                      #page: page,
                      #limit: limit,
                    }),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, List<_i7.PostEntity>>>);
}
