// Mocks generated by Mockito 5.4.5 from annotations
// in linkedin_clone/test/mocks/mock_company_repository.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:linkedin_clone/features/company/data/datasources/company_remote_data_source.dart'
    as _i2;
import 'package:linkedin_clone/features/company/data/repositories/company_repository_impl.dart'
    as _i4;
import 'package:linkedin_clone/features/company/domain/entities/company.dart'
    as _i3;
import 'package:linkedin_clone/features/company/domain/entities/company_update_entity.dart'
    as _i7;
import 'package:linkedin_clone/features/company/domain/entities/user.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCompanyRemoteDataSource_0 extends _i1.SmartFake
    implements _i2.CompanyRemoteDataSource {
  _FakeCompanyRemoteDataSource_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCompany_1 extends _i1.SmartFake implements _i3.Company {
  _FakeCompany_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [CompanyRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockCompanyRepositoryImpl extends _i1.Mock
    implements _i4.CompanyRepositoryImpl {
  MockCompanyRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CompanyRemoteDataSource get remoteDataSource =>
      (super.noSuchMethod(
            Invocation.getter(#remoteDataSource),
            returnValue: _FakeCompanyRemoteDataSource_0(
              this,
              Invocation.getter(#remoteDataSource),
            ),
          )
          as _i2.CompanyRemoteDataSource);

  @override
  _i5.Future<_i3.Company> getCompanyDetails(String? companyId) =>
      (super.noSuchMethod(
            Invocation.method(#getCompanyDetails, [companyId]),
            returnValue: _i5.Future<_i3.Company>.value(
              _FakeCompany_1(
                this,
                Invocation.method(#getCompanyDetails, [companyId]),
              ),
            ),
          )
          as _i5.Future<_i3.Company>);

  @override
  _i5.Future<List<_i6.User>> getCompanyFollowers(String? companyId) =>
      (super.noSuchMethod(
            Invocation.method(#getCompanyFollowers, [companyId]),
            returnValue: _i5.Future<List<_i6.User>>.value(<_i6.User>[]),
          )
          as _i5.Future<List<_i6.User>>);

  @override
  _i5.Future<List<_i3.Company>> getRelatedCompanies(String? companyId) =>
      (super.noSuchMethod(
            Invocation.method(#getRelatedCompanies, [companyId]),
            returnValue: _i5.Future<List<_i3.Company>>.value(<_i3.Company>[]),
          )
          as _i5.Future<List<_i3.Company>>);

  @override
  _i5.Future<void> createCompany(_i3.CompanyCreateEntity? company) =>
      (super.noSuchMethod(
            Invocation.method(#createCompany, [company]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> updateCompanyDetails(
    _i7.UpdateCompanyEntity? updatedCompany,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateCompanyDetails, [updatedCompany]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}
