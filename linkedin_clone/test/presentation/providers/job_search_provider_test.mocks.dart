// Mocks generated by Mockito 5.4.5 from annotations
// in linkedin_clone/test/presentation/providers/job_search_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:linkedin_clone/features/jobs/domain/entities/job_entity.dart'
    as _i5;
import 'package:linkedin_clone/features/jobs/domain/repositories/job_repository.dart'
    as _i2;
import 'package:linkedin_clone/features/jobs/domain/usecases/search_jobs_use_case.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeJobRepository_0 extends _i1.SmartFake implements _i2.JobRepository {
  _FakeJobRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SearchJobs].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchJobs extends _i1.Mock implements _i3.SearchJobs {
  MockSearchJobs() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.JobRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeJobRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.JobRepository);

  @override
  _i4.Future<List<_i5.Job>> call({
    String? keyword,
    String? location,
    String? industry,
    String? experienceLevel,
    String? company,
    double? minSalary,
    double? maxSalary,
    int? page = 1,
    int? limit = 5,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {
              #keyword: keyword,
              #location: location,
              #industry: industry,
              #experienceLevel: experienceLevel,
              #company: company,
              #minSalary: minSalary,
              #maxSalary: maxSalary,
              #page: page,
              #limit: limit,
            }),
            returnValue: _i4.Future<List<_i5.Job>>.value(<_i5.Job>[]),
          )
          as _i4.Future<List<_i5.Job>>);
}
