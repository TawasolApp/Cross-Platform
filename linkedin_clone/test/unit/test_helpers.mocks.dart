// Mocks generated by Mockito 5.4.5 from annotations
// in linkedin_clone/test/unit/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:fpdart/fpdart.dart' as _i5;
import 'package:linkedin_clone/core/errors/failures.dart' as _i6;
import 'package:linkedin_clone/features/authentication/Domain/Entities/user_entity.dart'
    as _i7;
import 'package:linkedin_clone/features/authentication/Domain/Repository/auth_repository.dart'
    as _i2;
import 'package:linkedin_clone/features/authentication/Domain/UseCases/forgot_password_usecase.dart'
    as _i9;
import 'package:linkedin_clone/features/authentication/Domain/UseCases/login_usecase.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthRepository_0 extends _i1.SmartFake
    implements _i2.AuthRepository {
  _FakeAuthRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [LoginUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUseCase extends _i1.Mock implements _i3.LoginUseCase {
  MockLoginUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeAuthRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.AuthRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, _i7.UserEntity>> call(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [email, password]),
            returnValue:
                _i4.Future<_i5.Either<_i6.Failure, _i7.UserEntity>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, _i7.UserEntity>>(
                    this,
                    Invocation.method(#call, [email, password]),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, _i7.UserEntity>>);

  @override
  _i4.Future<_i5.Either<_i6.Failure, void>> loginWithGoogle(String? idToken) =>
      (super.noSuchMethod(
            Invocation.method(#loginWithGoogle, [idToken]),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, void>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                this,
                Invocation.method(#loginWithGoogle, [idToken]),
              ),
            ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, void>>);
}

/// A class which mocks [ForgotPassUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockForgotPassUseCase extends _i1.Mock implements _i9.ForgotPassUseCase {
  MockForgotPassUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeAuthRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.AuthRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, void>> call(String? email) =>
      (super.noSuchMethod(
            Invocation.method(#call, [email]),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, void>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                this,
                Invocation.method(#call, [email]),
              ),
            ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, void>>);
}
