// Mocks generated by Mockito 5.4.5 from annotations
// in linkedin_clone/test/unit/profile_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:fpdart/fpdart.dart' as _i5;
import 'package:linkedin_clone/core/errors/failures.dart' as _i6;
import 'package:linkedin_clone/core/usecase/usecase.dart' as _i11;
import 'package:linkedin_clone/features/profile/domain/entities/certification.dart'
    as _i38;
import 'package:linkedin_clone/features/profile/domain/entities/education.dart'
    as _i34;
import 'package:linkedin_clone/features/profile/domain/entities/endorsement.dart'
    as _i43;
import 'package:linkedin_clone/features/profile/domain/entities/experience.dart'
    as _i27;
import 'package:linkedin_clone/features/profile/domain/entities/profile.dart'
    as _i7;
import 'package:linkedin_clone/features/profile/domain/entities/skill.dart'
    as _i31;
import 'package:linkedin_clone/features/profile/domain/repositories/profile_repository.dart'
    as _i2;
import 'package:linkedin_clone/features/profile/domain/usecases/certifications/add_certification.dart'
    as _i37;
import 'package:linkedin_clone/features/profile/domain/usecases/certifications/delete_certification.dart'
    as _i40;
import 'package:linkedin_clone/features/profile/domain/usecases/certifications/update_certification.dart'
    as _i39;
import 'package:linkedin_clone/features/profile/domain/usecases/education/add_education.dart'
    as _i33;
import 'package:linkedin_clone/features/profile/domain/usecases/education/delete_education.dart'
    as _i36;
import 'package:linkedin_clone/features/profile/domain/usecases/education/update_education.dart'
    as _i35;
import 'package:linkedin_clone/features/profile/domain/usecases/experience/add_experience.dart'
    as _i26;
import 'package:linkedin_clone/features/profile/domain/usecases/experience/delete_experience.dart'
    as _i29;
import 'package:linkedin_clone/features/profile/domain/usecases/experience/update_experience.dart'
    as _i28;
import 'package:linkedin_clone/features/profile/domain/usecases/profile/delete_bio.dart'
    as _i25;
import 'package:linkedin_clone/features/profile/domain/usecases/profile/delete_cover_photo.dart'
    as _i13;
import 'package:linkedin_clone/features/profile/domain/usecases/profile/delete_headline.dart'
    as _i15;
import 'package:linkedin_clone/features/profile/domain/usecases/profile/delete_industry.dart'
    as _i17;
import 'package:linkedin_clone/features/profile/domain/usecases/profile/delete_location.dart'
    as _i19;
import 'package:linkedin_clone/features/profile/domain/usecases/profile/delete_profile_picture.dart'
    as _i10;
import 'package:linkedin_clone/features/profile/domain/usecases/profile/delete_resume.dart'
    as _i23;
import 'package:linkedin_clone/features/profile/domain/usecases/profile/get_profile.dart'
    as _i3;
import 'package:linkedin_clone/features/profile/domain/usecases/profile/update_bio.dart'
    as _i24;
import 'package:linkedin_clone/features/profile/domain/usecases/profile/update_cover_picture.dart'
    as _i12;
import 'package:linkedin_clone/features/profile/domain/usecases/profile/update_first_name.dart'
    as _i20;
import 'package:linkedin_clone/features/profile/domain/usecases/profile/update_headline.dart'
    as _i14;
import 'package:linkedin_clone/features/profile/domain/usecases/profile/update_industry.dart'
    as _i16;
import 'package:linkedin_clone/features/profile/domain/usecases/profile/update_last_name.dart'
    as _i21;
import 'package:linkedin_clone/features/profile/domain/usecases/profile/update_location.dart'
    as _i18;
import 'package:linkedin_clone/features/profile/domain/usecases/profile/update_profile_picture.dart'
    as _i9;
import 'package:linkedin_clone/features/profile/domain/usecases/profile/update_resume.dart'
    as _i22;
import 'package:linkedin_clone/features/profile/domain/usecases/skills/add_skill.dart'
    as _i30;
import 'package:linkedin_clone/features/profile/domain/usecases/skills/delete_skill.dart'
    as _i32;
import 'package:linkedin_clone/features/profile/domain/usecases/skills/get_skill_endorsements.dart'
    as _i42;
import 'package:linkedin_clone/features/profile/domain/usecases/skills/update_skill.dart'
    as _i41;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProfileRepository_0 extends _i1.SmartFake
    implements _i2.ProfileRepository {
  _FakeProfileRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetProfileUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProfileUseCase extends _i1.Mock implements _i3.GetProfileUseCase {
  @override
  _i2.ProfileRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
            returnValueForMissingStub: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProfileRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, _i7.Profile>> call(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#call, [id]),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, _i7.Profile>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, _i7.Profile>>(
                this,
                Invocation.method(#call, [id]),
              ),
            ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.Failure, _i7.Profile>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, _i7.Profile>>(
                    this,
                    Invocation.method(#call, [id]),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, _i7.Profile>>);
}

/// A class which mocks [UpdateProfilePictureUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateProfilePictureUseCase extends _i1.Mock
    implements _i9.UpdateProfilePictureUseCase {
  @override
  _i2.ProfileRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
            returnValueForMissingStub: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProfileRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, void>> call(
    _i9.ProfilePictureParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, void>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.Failure, void>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, void>>);
}

/// A class which mocks [DeleteProfilePictureUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteProfilePictureUseCase extends _i1.Mock
    implements _i10.DeleteProfilePictureUseCase {
  @override
  _i2.ProfileRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
            returnValueForMissingStub: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProfileRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, void>> call(_i11.NoParams? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, void>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.Failure, void>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, void>>);
}

/// A class which mocks [UpdateCoverPictureUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateCoverPictureUseCase extends _i1.Mock
    implements _i12.UpdateCoverPictureUseCase {
  @override
  _i2.ProfileRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
            returnValueForMissingStub: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProfileRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, void>> call(
    _i12.CoverPictureParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, void>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.Failure, void>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, void>>);
}

/// A class which mocks [DeleteCoverPhotoUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteCoverPhotoUseCase extends _i1.Mock
    implements _i13.DeleteCoverPhotoUseCase {
  @override
  _i2.ProfileRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
            returnValueForMissingStub: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProfileRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, void>> call(_i11.NoParams? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, void>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.Failure, void>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, void>>);
}

/// A class which mocks [UpdateHeadlineUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateHeadlineUseCase extends _i1.Mock
    implements _i14.UpdateHeadlineUseCase {
  @override
  _i2.ProfileRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
            returnValueForMissingStub: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProfileRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, void>> call(_i14.HeadlineParams? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, void>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.Failure, void>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, void>>);
}

/// A class which mocks [DeleteHeadlineUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteHeadlineUseCase extends _i1.Mock
    implements _i15.DeleteHeadlineUseCase {
  @override
  _i2.ProfileRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
            returnValueForMissingStub: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProfileRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, void>> call(_i11.NoParams? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, void>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.Failure, void>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, void>>);
}

/// A class which mocks [UpdateIndustryUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateIndustryUseCase extends _i1.Mock
    implements _i16.UpdateIndustryUseCase {
  @override
  _i2.ProfileRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
            returnValueForMissingStub: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProfileRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, void>> call(_i16.IndustryParams? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, void>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.Failure, void>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, void>>);
}

/// A class which mocks [DeleteIndustryUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteIndustryUseCase extends _i1.Mock
    implements _i17.DeleteIndustryUseCase {
  @override
  _i2.ProfileRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
            returnValueForMissingStub: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProfileRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, void>> call(_i11.NoParams? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, void>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.Failure, void>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, void>>);
}

/// A class which mocks [UpdateLocationUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateLocationUseCase extends _i1.Mock
    implements _i18.UpdateLocationUseCase {
  @override
  _i2.ProfileRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
            returnValueForMissingStub: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProfileRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, void>> call(_i18.LocationParams? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, void>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.Failure, void>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, void>>);
}

/// A class which mocks [DeleteLocationUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteLocationUseCase extends _i1.Mock
    implements _i19.DeleteLocationUseCase {
  @override
  _i2.ProfileRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
            returnValueForMissingStub: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProfileRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, void>> call(_i11.NoParams? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, void>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.Failure, void>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, void>>);
}

/// A class which mocks [UpdateFirstNameUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateFirstNameUseCase extends _i1.Mock
    implements _i20.UpdateFirstNameUseCase {
  @override
  _i2.ProfileRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
            returnValueForMissingStub: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProfileRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, void>> call(
    _i20.FirstNameParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, void>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.Failure, void>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, void>>);
}

/// A class which mocks [UpdateLastNameUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateLastNameUseCase extends _i1.Mock
    implements _i21.UpdateLastNameUseCase {
  @override
  _i2.ProfileRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
            returnValueForMissingStub: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProfileRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, void>> call(_i21.LastNameParams? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, void>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.Failure, void>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, void>>);
}

/// A class which mocks [UpdateResumeUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateResumeUseCase extends _i1.Mock
    implements _i22.UpdateResumeUseCase {
  @override
  _i2.ProfileRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
            returnValueForMissingStub: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProfileRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, void>> call(_i22.ResumeParams? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, void>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.Failure, void>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, void>>);
}

/// A class which mocks [DeleteResumeUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteResumeUseCase extends _i1.Mock
    implements _i23.DeleteResumeUseCase {
  @override
  _i2.ProfileRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
            returnValueForMissingStub: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProfileRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, void>> call(_i11.NoParams? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, void>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.Failure, void>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, void>>);
}

/// A class which mocks [UpdateBioUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateBioUseCase extends _i1.Mock implements _i24.UpdateBioUseCase {
  @override
  _i2.ProfileRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
            returnValueForMissingStub: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProfileRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, void>> call(_i24.BioParams? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, void>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.Failure, void>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, void>>);
}

/// A class which mocks [DeleteBioUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteBioUseCase extends _i1.Mock implements _i25.DeleteBioUseCase {
  @override
  _i2.ProfileRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
            returnValueForMissingStub: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProfileRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, void>> call(_i11.NoParams? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, void>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.Failure, void>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, void>>);
}

/// A class which mocks [AddExperienceUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddExperienceUseCase extends _i1.Mock
    implements _i26.AddExperienceUseCase {
  @override
  _i2.ProfileRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
            returnValueForMissingStub: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProfileRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, void>> call(_i27.Experience? experience) =>
      (super.noSuchMethod(
            Invocation.method(#call, [experience]),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, void>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                this,
                Invocation.method(#call, [experience]),
              ),
            ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.Failure, void>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                    this,
                    Invocation.method(#call, [experience]),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, void>>);
}

/// A class which mocks [UpdateExperienceUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateExperienceUseCase extends _i1.Mock
    implements _i28.UpdateExperienceUseCase {
  @override
  _i2.ProfileRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
            returnValueForMissingStub: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProfileRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, void>> call(
    _i28.ExperienceUpdateParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, void>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.Failure, void>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, void>>);
}

/// A class which mocks [DeleteExperienceUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteExperienceUseCase extends _i1.Mock
    implements _i29.DeleteExperienceUseCase {
  @override
  _i2.ProfileRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
            returnValueForMissingStub: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProfileRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, void>> call(String? experienceId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [experienceId]),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, void>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                this,
                Invocation.method(#call, [experienceId]),
              ),
            ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.Failure, void>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                    this,
                    Invocation.method(#call, [experienceId]),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, void>>);
}

/// A class which mocks [AddSkillUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddSkillUseCase extends _i1.Mock implements _i30.AddSkillUseCase {
  @override
  _i2.ProfileRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
            returnValueForMissingStub: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProfileRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, void>> call(_i31.Skill? skill) =>
      (super.noSuchMethod(
            Invocation.method(#call, [skill]),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, void>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                this,
                Invocation.method(#call, [skill]),
              ),
            ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.Failure, void>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                    this,
                    Invocation.method(#call, [skill]),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, void>>);
}

/// A class which mocks [DeleteSkillUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteSkillUseCase extends _i1.Mock
    implements _i32.DeleteSkillUseCase {
  @override
  _i2.ProfileRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
            returnValueForMissingStub: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProfileRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, void>> call(String? skillName) =>
      (super.noSuchMethod(
            Invocation.method(#call, [skillName]),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, void>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                this,
                Invocation.method(#call, [skillName]),
              ),
            ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.Failure, void>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                    this,
                    Invocation.method(#call, [skillName]),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, void>>);
}

/// A class which mocks [AddEducationUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddEducationUseCase extends _i1.Mock
    implements _i33.AddEducationUseCase {
  @override
  _i2.ProfileRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
            returnValueForMissingStub: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProfileRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, void>> call(_i34.Education? education) =>
      (super.noSuchMethod(
            Invocation.method(#call, [education]),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, void>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                this,
                Invocation.method(#call, [education]),
              ),
            ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.Failure, void>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                    this,
                    Invocation.method(#call, [education]),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, void>>);
}

/// A class which mocks [UpdateEducationUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateEducationUseCase extends _i1.Mock
    implements _i35.UpdateEducationUseCase {
  @override
  _i2.ProfileRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
            returnValueForMissingStub: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProfileRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, void>> call(
    _i35.EducationUpdateParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, void>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.Failure, void>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, void>>);
}

/// A class which mocks [DeleteEducationUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteEducationUseCase extends _i1.Mock
    implements _i36.DeleteEducationUseCase {
  @override
  _i2.ProfileRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
            returnValueForMissingStub: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProfileRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, void>> call(String? educationId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [educationId]),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, void>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                this,
                Invocation.method(#call, [educationId]),
              ),
            ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.Failure, void>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                    this,
                    Invocation.method(#call, [educationId]),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, void>>);
}

/// A class which mocks [AddCertificationUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddCertificationUseCase extends _i1.Mock
    implements _i37.AddCertificationUseCase {
  @override
  _i2.ProfileRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
            returnValueForMissingStub: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProfileRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, void>> call(
    _i38.Certification? certification,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [certification]),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, void>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                this,
                Invocation.method(#call, [certification]),
              ),
            ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.Failure, void>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                    this,
                    Invocation.method(#call, [certification]),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, void>>);
}

/// A class which mocks [UpdateCertificationUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateCertificationUseCase extends _i1.Mock
    implements _i39.UpdateCertificationUseCase {
  @override
  _i2.ProfileRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
            returnValueForMissingStub: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProfileRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, void>> call(
    _i39.CertificationUpdateParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, void>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.Failure, void>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, void>>);
}

/// A class which mocks [DeleteCertificationUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteCertificationUseCase extends _i1.Mock
    implements _i40.DeleteCertificationUseCase {
  @override
  _i2.ProfileRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
            returnValueForMissingStub: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProfileRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, void>> call(String? certification) =>
      (super.noSuchMethod(
            Invocation.method(#call, [certification]),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, void>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                this,
                Invocation.method(#call, [certification]),
              ),
            ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.Failure, void>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                    this,
                    Invocation.method(#call, [certification]),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, void>>);
}

/// A class which mocks [UpdateSkillUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateSkillUseCase extends _i1.Mock
    implements _i41.UpdateSkillUseCase {
  @override
  _i2.ProfileRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
            returnValueForMissingStub: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProfileRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, void>> call(
    _i41.UpdateSkillParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, void>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.Failure, void>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, void>>);
}

/// A class which mocks [GetSkillEndorsements].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetSkillEndorsements extends _i1.Mock
    implements _i42.GetSkillEndorsements {
  @override
  _i2.ProfileRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
            returnValueForMissingStub: _FakeProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProfileRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, List<_i43.Endorsement>>> call(
    _i42.GetSkillEndorsementsParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<
              _i5.Either<_i6.Failure, List<_i43.Endorsement>>
            >.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, List<_i43.Endorsement>>>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
            returnValueForMissingStub: _i4.Future<
              _i5.Either<_i6.Failure, List<_i43.Endorsement>>
            >.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, List<_i43.Endorsement>>>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, List<_i43.Endorsement>>>);
}
