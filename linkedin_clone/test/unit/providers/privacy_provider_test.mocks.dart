// Mocks generated by Mockito 5.4.5 from annotations
// in linkedin_clone/test/unit/providers/privacy_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:linkedin_clone/features/privacy/domain/entities/privacy_user_entity.dart'
    as _i7;
import 'package:linkedin_clone/features/privacy/domain/repository/privacy_repository.dart'
    as _i2;
import 'package:linkedin_clone/features/privacy/domain/usecases/block_user_usecase.dart'
    as _i3;
import 'package:linkedin_clone/features/privacy/domain/usecases/get_blocked_list_usecase.dart'
    as _i6;
import 'package:linkedin_clone/features/privacy/domain/usecases/report_post_usecase.dart'
    as _i8;
import 'package:linkedin_clone/features/privacy/domain/usecases/report_user_usecase.dart'
    as _i9;
import 'package:linkedin_clone/features/privacy/domain/usecases/unblock_user_usecase.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePrivacyRepository_0 extends _i1.SmartFake
    implements _i2.PrivacyRepository {
  _FakePrivacyRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [BlockUserUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockBlockUserUseCase extends _i1.Mock implements _i3.BlockUserUseCase {
  MockBlockUserUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PrivacyRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakePrivacyRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.PrivacyRepository);

  @override
  _i4.Future<bool> call(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [userId]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}

/// A class which mocks [UnblockUserUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUnblockUserUseCase extends _i1.Mock
    implements _i5.UnblockUserUseCase {
  MockUnblockUserUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PrivacyRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakePrivacyRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.PrivacyRepository);

  @override
  _i4.Future<bool> call(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [userId]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}

/// A class which mocks [GetBlockedListUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetBlockedListUseCase extends _i1.Mock
    implements _i6.GetBlockedListUseCase {
  MockGetBlockedListUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PrivacyRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakePrivacyRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.PrivacyRepository);

  @override
  _i4.Future<List<_i7.PrivacyUserEntity>> call({
    int? page = 0,
    int? limit = 0,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {#page: page, #limit: limit}),
            returnValue: _i4.Future<List<_i7.PrivacyUserEntity>>.value(
              <_i7.PrivacyUserEntity>[],
            ),
          )
          as _i4.Future<List<_i7.PrivacyUserEntity>>);
}

/// A class which mocks [ReportPostUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockReportPostUseCase extends _i1.Mock implements _i8.ReportPostUseCase {
  MockReportPostUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PrivacyRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakePrivacyRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.PrivacyRepository);

  @override
  _i4.Future<bool> call(String? postId, String? reason) =>
      (super.noSuchMethod(
            Invocation.method(#call, [postId, reason]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}

/// A class which mocks [ReportUserUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockReportUserUseCase extends _i1.Mock implements _i9.ReportUserUseCase {
  MockReportUserUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PrivacyRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakePrivacyRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.PrivacyRepository);

  @override
  _i4.Future<bool> call(String? userId, String? reason) =>
      (super.noSuchMethod(
            Invocation.method(#call, [userId, reason]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}
