// Mocks generated by Mockito 5.4.5 from annotations
// in linkedin_clone/test/unit/providers/networks_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:linkedin_clone/features/connections/domain/entities/connections_user_entity.dart'
    as _i5;
import 'package:linkedin_clone/features/connections/domain/entities/people_you_may_know_user_entity.dart'
    as _i10;
import 'package:linkedin_clone/features/connections/domain/repository/connections_repository.dart'
    as _i2;
import 'package:linkedin_clone/features/connections/domain/usecases/follow/follow_user_usecase.dart'
    as _i8;
import 'package:linkedin_clone/features/connections/domain/usecases/follow/get_followers_count_usecase.dart'
    as _i11;
import 'package:linkedin_clone/features/connections/domain/usecases/follow/get_followers_list_usecase.dart'
    as _i7;
import 'package:linkedin_clone/features/connections/domain/usecases/follow/get_following_list_usecase.dart'
    as _i3;
import 'package:linkedin_clone/features/connections/domain/usecases/follow/get_followings_count_usecase.dart'
    as _i12;
import 'package:linkedin_clone/features/connections/domain/usecases/follow/unfollow_user_usecase.dart'
    as _i6;
import 'package:linkedin_clone/features/connections/domain/usecases/get_people_you_may_know_usecase.dart'
    as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeConnectionsRepository_0 extends _i1.SmartFake
    implements _i2.ConnectionsRepository {
  _FakeConnectionsRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetFollowingListUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetFollowingListUseCase extends _i1.Mock
    implements _i3.GetFollowingListUseCase {
  MockGetFollowingListUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ConnectionsRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeConnectionsRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ConnectionsRepository);

  @override
  _i4.Future<List<_i5.ConnectionsUserEntity>> call({
    int? page = 0,
    int? limit = 0,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {#page: page, #limit: limit}),
            returnValue: _i4.Future<List<_i5.ConnectionsUserEntity>>.value(
              <_i5.ConnectionsUserEntity>[],
            ),
          )
          as _i4.Future<List<_i5.ConnectionsUserEntity>>);
}

/// A class which mocks [UnfollowUserUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUnfollowUserUseCase extends _i1.Mock
    implements _i6.UnfollowUserUseCase {
  MockUnfollowUserUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ConnectionsRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeConnectionsRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ConnectionsRepository);

  @override
  _i4.Future<bool> call(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [userId]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}

/// A class which mocks [GetFollowersListUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetFollowersListUseCase extends _i1.Mock
    implements _i7.GetFollowersListUseCase {
  MockGetFollowersListUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ConnectionsRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeConnectionsRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ConnectionsRepository);

  @override
  _i4.Future<List<_i5.ConnectionsUserEntity>> call({
    int? page = 0,
    int? limit = 0,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {#page: page, #limit: limit}),
            returnValue: _i4.Future<List<_i5.ConnectionsUserEntity>>.value(
              <_i5.ConnectionsUserEntity>[],
            ),
          )
          as _i4.Future<List<_i5.ConnectionsUserEntity>>);
}

/// A class which mocks [FollowUserUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFollowUserUseCase extends _i1.Mock implements _i8.FollowUserUseCase {
  MockFollowUserUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ConnectionsRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeConnectionsRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ConnectionsRepository);

  @override
  _i4.Future<bool> call(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [userId]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}

/// A class which mocks [GetPeopleYouMayKnowUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPeopleYouMayKnowUseCase extends _i1.Mock
    implements _i9.GetPeopleYouMayKnowUseCase {
  MockGetPeopleYouMayKnowUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ConnectionsRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeConnectionsRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ConnectionsRepository);

  @override
  _i4.Future<List<_i10.PeopleYouMayKnowUserEntity>> call({
    int? page = 0,
    int? limit = 0,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {#page: page, #limit: limit}),
            returnValue:
                _i4.Future<List<_i10.PeopleYouMayKnowUserEntity>>.value(
                  <_i10.PeopleYouMayKnowUserEntity>[],
                ),
          )
          as _i4.Future<List<_i10.PeopleYouMayKnowUserEntity>>);
}

/// A class which mocks [GetFollowersCountUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetFollowersCountUsecase extends _i1.Mock
    implements _i11.GetFollowersCountUsecase {
  MockGetFollowersCountUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ConnectionsRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeConnectionsRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ConnectionsRepository);

  @override
  _i4.Future<int> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);
}

/// A class which mocks [GetFollowingsCountUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetFollowingsCountUsecase extends _i1.Mock
    implements _i12.GetFollowingsCountUsecase {
  MockGetFollowingsCountUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ConnectionsRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeConnectionsRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ConnectionsRepository);

  @override
  _i4.Future<int> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);
}
